{"ast":null,"code":"var _jsxFileName = \"E:\\\\1practick_js\\\\task-manager\\\\tasc-manager\\\\client\\\\src\\\\components\\\\app\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { serverGetTasks, serverDeleteTask, serverAddTask, serverMarkTaskAsDone, serverEditTask } from '../../services/task';\nimport Panel from '../panel/Panel';\nimport List from '../list/List';\nimport './App.css';\nimport { text } from 'body-parser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [task, setTask] = useState([]);\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [filter, setFilter] = useState('all');\n  const [editedId, setEditedId] = useState(null);\n  const [editedText, setEditedText] = useState('');\n  useEffect(() => {\n    serverGetTasks().then(setTask);\n  }, []);\n  console.log(selectedItems);\n  console.log(task);\n  const addTask = async text => {\n    if (text) {\n      const newTask = await serverAddTask(text); //захист від пустого інпуту\n      setTask([...task, newTask]); //формування данних таски \n      //{id: randomInteger(0, 10000), text, done: false}\n    }\n  };\n  const selectTask = id => {\n    setSelectedItems(prev => prev.includes(id) ? prev.filter(i => i !== id) : [...prev, id] //додавання в стейт id тих таск які обрані користувачем \n    );\n  };\n  const toogleStatus = async () => {\n    await serverMarkTaskAsDone(selectedItems);\n    setTask(prev => prev.map(task => selectedItems.includes(task.id) ? {\n      ...task,\n      done: !task.done\n    } : task)); //зміна поля done\n    setSelectedItems([]);\n  };\n  const deleteTask = async () => {\n    await serverDeleteTask(selectedItems);\n    setTask(prev => prev.filter(task => !selectedItems.includes(task.id))); //фільтрація стейту з тасками по id, ті що обрані будуть відалені фільтрацією\n    setSelectedItems([]);\n  };\n  const filterTasks = (items, filter) => {\n    if (filter === 'done') {\n      return items.filter(item => item.done);\n    }\n    if (filter === 'unDone') {\n      return items.filter(item => !item.done);\n    } else {\n      return items;\n    }\n  };\n  const updateList = filter => {\n    setFilter(filter);\n  };\n  const startEdit = (id, currentText) => {\n    //console.log(id, currentText)\n    setEditedId(id);\n    setEditedText(currentText);\n  };\n  const cancelEdit = () => {\n    setEditedId(null);\n    setEditedText('');\n  };\n  const saveEdit = async id => {\n    const update = await serverEditTask(id, editedText);\n    setTask(prevTasks => prevTasks.map(item => item.id === id ? update : item));\n    cancelEdit(); // сбрасываем редактирование\n  };\n  const listOfTasks = filterTasks(task, filter);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Panel, {\n      addTask: addTask,\n      toogleStatus: toogleStatus,\n      deleteTask: deleteTask,\n      selectedItems: selectedItems,\n      updateList: updateList,\n      filter: filter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        task: listOfTasks,\n        selectTask: selectTask,\n        selectedItems: selectedItems,\n        startEdit: startEdit,\n        saveEdit: saveEdit,\n        setEditedText: setEditedText,\n        cancelEdit: cancelEdit,\n        editedId: editedId,\n        editedText: editedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 6\n  }, this);\n}\n_s(App, \"t2vdk/DU5nfTPdJfEq6UfoIWg1U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","serverGetTasks","serverDeleteTask","serverAddTask","serverMarkTaskAsDone","serverEditTask","Panel","List","text","jsxDEV","_jsxDEV","App","_s","task","setTask","selectedItems","setSelectedItems","filter","setFilter","editedId","setEditedId","editedText","setEditedText","then","console","log","addTask","newTask","selectTask","id","prev","includes","i","toogleStatus","map","done","deleteTask","filterTasks","items","item","updateList","startEdit","currentText","cancelEdit","saveEdit","update","prevTasks","listOfTasks","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/1practick_js/task-manager/tasc-manager/client/src/components/app/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { serverGetTasks, serverDeleteTask, serverAddTask, serverMarkTaskAsDone, serverEditTask } from '../../services/task';\n\nimport Panel from '../panel/Panel';\nimport List from '../list/List';\nimport './App.css';\nimport { text } from 'body-parser';\n\nfunction App() {\n\n  \tconst [task, setTask] = useState([])\n  \tconst [selectedItems, setSelectedItems] = useState([])\n\tconst [filter, setFilter] = useState('all')\n\tconst [editedId, setEditedId] = useState(null)\n\tconst [editedText, setEditedText] = useState('')\n\n\tuseEffect(()=>{\n\t\tserverGetTasks()\n\t\t.then(setTask)\n\t}, [])\n\n  console.log(selectedItems)\n  console.log(task)\n\n\n\n\n\n\n\tconst addTask = async (text) =>{\n\t\tif(text){\t\t\n\t\t\tconst newTask = await serverAddTask(text)\t\t\t//захист від пустого інпуту\n\t\t\tsetTask([...task, newTask])\t\t\t\t\t//формування данних таски \n\t\t\t//{id: randomInteger(0, 10000), text, done: false}\n\t\t}\n  \t}\n\n\tconst selectTask = (id) =>{\n\t\tsetSelectedItems(prev => prev.includes(id) ? prev.filter(i => i !== id) : [...prev, id]\t\t//додавання в стейт id тих таск які обрані користувачем \n\t\t\n\t\t)\n\t}\n\n\tconst toogleStatus = async() => {\n\t\tawait serverMarkTaskAsDone(selectedItems)\n\t\tsetTask(prev => prev.map(task => selectedItems.includes(task.id) ? {...task, done: !task.done} : task));\t//зміна поля done\n\t\tsetSelectedItems([])\n\t}\n\n\tconst deleteTask = async () => {\n\t\tawait serverDeleteTask(selectedItems)\n\t\tsetTask(prev => prev.filter(task => !selectedItems.includes(task.id)  ));\t//фільтрація стейту з тасками по id, ті що обрані будуть відалені фільтрацією\n\t\tsetSelectedItems([])\n\t}\n\n\t\n    const filterTasks = (items, filter) => {\n        if(filter === 'done'){\n            return items.filter(item => item.done)\n        }if(filter === 'unDone'){\n            return items.filter(item => !item.done)\n        }else{\n            return items\n        }\n    }\n\n\n\tconst updateList = (filter) => {\n\t\tsetFilter(filter)\n\t}\n\n\n  const startEdit = (id, currentText) => {\n\t//console.log(id, currentText)\n\tsetEditedId(id);\n\tsetEditedText(currentText);\n  };\n  \n  const cancelEdit = () => {\n\tsetEditedId(null);\n\tsetEditedText('');\n  };\n  \n  const saveEdit = async (id) => {\n\tconst update = await serverEditTask(id, editedText)\n\tsetTask(prevTasks =>\n\t  prevTasks.map(item =>\n\t\titem.id === id ? update : item\n\t  )\n\t);\n\tcancelEdit(); // сбрасываем редактирование\n  };\n\n\n\n\tconst listOfTasks = filterTasks(task, filter)\n\n \t return (\n    \t<div className='container'>\n        \t<Panel addTask={addTask} \n\t\t\ttoogleStatus={toogleStatus} \n\t\t\tdeleteTask={deleteTask} \n\t\t\tselectedItems={selectedItems} \n\t\t\tupdateList={updateList} \n\t\t\tfilter={filter}\n\t\t\t/>\n\n        \t<div className='App'>\n      \n\n        \t\t<List task={listOfTasks} \n\t\t\t\tselectTask={selectTask} \n\t\t\t\tselectedItems={selectedItems} \n\t\t\t\tstartEdit={startEdit} \n\t\t\t\tsaveEdit={saveEdit} \n\t\t\t\tsetEditedText={setEditedText}\n\t\t\t\tcancelEdit={cancelEdit}\n\t\t\t\teditedId={editedId}\n\t\t\t\teditedText={editedText}\n\t\t\t\t/>\n      \n    \t</div>\n    \t</div>\n\n  \t);\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}