{"ast":null,"code":"var _jsxFileName = \"E:\\\\1practick_js\\\\task-manager\\\\tasc-manager\\\\client\\\\src\\\\components\\\\listItem\\\\ListItem.js\";\nimport pancil from '../../resources/pancil.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListItem = ({\n  selectTask,\n  task,\n  selectedItems,\n  startEdit,\n  isEditing,\n  saveEdit,\n  setEditedText,\n  cancelEdit,\n  editedText\n}) => {\n  const colorStatus = () => {\n    if (selectedItems.includes(task.id)) {\n      return {\n        background: ' #FFA07A'\n      };\n    } else if (task.done) {\n      return {\n        background: 'rgb(0, 255, 127)'\n      };\n    } else {\n      return {\n        background: ' rgb(252, 232, 116)'\n      };\n    }\n  };\n\n  //    task.map(i => \t(<div key={i.id}>\n  //        {editedId === i.id ? (\n  //          \n  //          <div className='editingInputBlock'>\n  //            <input className='editingInput'\n  //              value={editedText}\n  //              onChange={(e) => setEditedText(e.target.value)}\n  //            />\n  //            <div className=\"editBtnBlock\">\n  //                <button className='confirm' onClick={() => saveEdit(i.id)}> Сохранить</button>\n  //                <button className='cancellation' onClick={() => cancelEdit()}> Отмена</button>\n  //            </div>\n  //\n  //          </div>\n  //\n  //          \n  //        ) : (\n  //          <ListItem key={i.id}\n  //           task={i} \n  //           selectTask={selectTask}  \n  //           selectedItems={selectedItems} \n  //           startEdit={startEdit}/>\n  //        )}\n  //      </div>\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"status\",\n      style: colorStatus(),\n      children: task.done ? 'выполнено' : 'в работе'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"task\",\n      children: [\"task: \", task.text]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"listBtnGroup\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"pancil\",\n        onClick: () => startEdit(task.id, task.task),\n        src: pancil,\n        alt: \"pancil\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => selectTask(task.id),\n        className: \"chooseBtn\",\n        children: \"choose\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_c = ListItem;\nexport default ListItem;\nvar _c;\n$RefreshReg$(_c, \"ListItem\");","map":{"version":3,"names":["pancil","jsxDEV","_jsxDEV","ListItem","selectTask","task","selectedItems","startEdit","isEditing","saveEdit","setEditedText","cancelEdit","editedText","colorStatus","includes","id","background","done","children","className","style","fileName","_jsxFileName","lineNumber","columnNumber","text","onClick","src","alt","_c","$RefreshReg$"],"sources":["E:/1practick_js/task-manager/tasc-manager/client/src/components/listItem/ListItem.js"],"sourcesContent":["import pancil from '../../resources/pancil.png'\r\n\r\nconst ListItem = ({selectTask, task, selectedItems, startEdit, isEditing, saveEdit, setEditedText, cancelEdit, editedText}) => {\r\n\r\n    const colorStatus =()=>{ \r\n\r\n        if(selectedItems.includes(task.id)){\r\n            return {background:' #FFA07A'}\r\n        }else if(task.done){\r\n            return {background:'rgb(0, 255, 127)'}\r\n        }else{ return {background:' rgb(252, 232, 116)'}}\r\n\r\n    }\r\n\r\n//    task.map(i => \t(<div key={i.id}>\r\n//        {editedId === i.id ? (\r\n//          \r\n//          <div className='editingInputBlock'>\r\n//            <input className='editingInput'\r\n//              value={editedText}\r\n//              onChange={(e) => setEditedText(e.target.value)}\r\n//            />\r\n//            <div className=\"editBtnBlock\">\r\n//                <button className='confirm' onClick={() => saveEdit(i.id)}> Сохранить</button>\r\n//                <button className='cancellation' onClick={() => cancelEdit()}> Отмена</button>\r\n//            </div>\r\n//\r\n//          </div>\r\n//\r\n//          \r\n//        ) : (\r\n//          <ListItem key={i.id}\r\n//           task={i} \r\n//           selectTask={selectTask}  \r\n//           selectedItems={selectedItems} \r\n//           startEdit={startEdit}/>\r\n//        )}\r\n//      </div>\r\n\r\n\r\n\r\n    return(\r\n        <li>\r\n                    \r\n            <h2 className='status' style={colorStatus()} >\r\n                {task.done ? 'выполнено' : 'в работе'}\r\n            </h2>\r\n\r\n            <h2 className='task'>task: {task.text}</h2>\r\n            <div className=\"listBtnGroup\">\r\n                <img className='pancil' onClick={() => startEdit(task.id, task.task)} src={pancil} alt=\"pancil\" />\r\n                <button onClick={()=>selectTask(task.id)}  className='chooseBtn'>choose</button>\r\n            </div>\r\n\r\n            \r\n        </li>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ListItem\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,4BAA4B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,QAAQ,GAAGA,CAAC;EAACC,UAAU;EAAEC,IAAI;EAAEC,aAAa;EAAEC,SAAS;EAAEC,SAAS;EAAEC,QAAQ;EAAEC,aAAa;EAAEC,UAAU;EAAEC;AAAU,CAAC,KAAK;EAE3H,MAAMC,WAAW,GAAEA,CAAA,KAAI;IAEnB,IAAGP,aAAa,CAACQ,QAAQ,CAACT,IAAI,CAACU,EAAE,CAAC,EAAC;MAC/B,OAAO;QAACC,UAAU,EAAC;MAAU,CAAC;IAClC,CAAC,MAAK,IAAGX,IAAI,CAACY,IAAI,EAAC;MACf,OAAO;QAACD,UAAU,EAAC;MAAkB,CAAC;IAC1C,CAAC,MAAI;MAAE,OAAO;QAACA,UAAU,EAAC;MAAqB,CAAC;IAAA;EAEpD,CAAC;;EAEL;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAII,oBACId,OAAA;IAAAgB,QAAA,gBAEIhB,OAAA;MAAIiB,SAAS,EAAC,QAAQ;MAACC,KAAK,EAAEP,WAAW,CAAC,CAAE;MAAAK,QAAA,EACvCb,IAAI,CAACY,IAAI,GAAG,WAAW,GAAG;IAAU;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,eAELtB,OAAA;MAAIiB,SAAS,EAAC,MAAM;MAAAD,QAAA,GAAC,QAAM,EAACb,IAAI,CAACoB,IAAI;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC3CtB,OAAA;MAAKiB,SAAS,EAAC,cAAc;MAAAD,QAAA,gBACzBhB,OAAA;QAAKiB,SAAS,EAAC,QAAQ;QAACO,OAAO,EAAEA,CAAA,KAAMnB,SAAS,CAACF,IAAI,CAACU,EAAE,EAAEV,IAAI,CAACA,IAAI,CAAE;QAACsB,GAAG,EAAE3B,MAAO;QAAC4B,GAAG,EAAC;MAAQ;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClGtB,OAAA;QAAQwB,OAAO,EAAEA,CAAA,KAAItB,UAAU,CAACC,IAAI,CAACU,EAAE,CAAE;QAAEI,SAAS,EAAC,WAAW;QAAAD,QAAA,EAAC;MAAM;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/E,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGN,CAAC;AAEb,CAAC;AAAAK,EAAA,GAvDK1B,QAAQ;AA2Dd,eAAeA,QAAQ;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}